//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UsersAPI {
    /**

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersCreate(body: User, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersCreateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /users/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<User> 
     */
    open class func usersCreateWithRequestBuilder(body: User) -> RequestBuilder<User> {
        let path = "/users/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }


    /**
     - POST /users/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter url2: (form)  
     - parameter username2: (form)  
     - parameter email2: (form)  
     - parameter groups2: (form)  
     - parameter url: (form)  
     - parameter username: (form)  
     - parameter email: (form)  
     - parameter groups: (form)  

     - returns: RequestBuilder<User> 
     */
    open class func usersCreateWithRequestBuilder(url2: String, username2: String, email2: String, groups2: [String], url: String, username: String, email: String, groups: [String]) -> RequestBuilder<User> {
        let path = "/users/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: {})
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter url2: (form)  
     - parameter username2: (form)  
     - parameter email2: (form)  
     - parameter groups2: (form)  
     - parameter url: (form)  
     - parameter username: (form)  
     - parameter email: (form)  
     - parameter groups: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersCreate(url2: String, username2: String, email2: String, groups2: [String], url: String, username: String, email: String, groups: [String], completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersCreateWithRequestBuilder(url2: url2, username2: username2, email2: email2, groups2: groups2, url: url, username: username, email: email, groups: groups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**

     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersDestroy(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        usersDestroyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - parameter _id: (path) A unique integer value identifying this user. 

     - returns: RequestBuilder<Void> 
     */
    open class func usersDestroyWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter page: (query) A page number within the paginated result set. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersList(page: Int? = nil, completion: @escaping ((_ data: PaginatedUserList?,_ error: Error?) -> Void)) {
        let username = "A00XXXXXX"
        let password = "password"
        let loginString = "\(username):\(password)"
        let loginData = loginString.data(using: .utf8)!
        let base64LoginString = loginData.base64EncodedString()
        usersListWithRequestBuilder(page: page)
            .addHeader(name: "Authorization", value: "Basic \(base64LoginString)")
            .execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "next" : "http://api.example.org/accounts/?page=4",
  "previous" : "http://api.example.org/accounts/?page=2",
  "count" : 123,
  "results" : [ {
    "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
    "url" : "http://example.com/aeiou",
    "email" : "",
    "username" : "username"
  }, {
    "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
    "url" : "http://example.com/aeiou",
    "email" : "",
    "username" : "username"
  } ]
}}]
     - parameter page: (query) A page number within the paginated result set. (optional)

     - returns: RequestBuilder<PaginatedUserList> 
     */
    open class func usersListWithRequestBuilder(page: Int? = nil) -> RequestBuilder<PaginatedUserList> {
        let path = "/users/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<PaginatedUserList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersPartialUpdate(_id: Int, body: PatchedUser? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersPartialUpdateWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func usersPartialUpdateWithRequestBuilder(_id: Int, body: PatchedUser? = nil) -> RequestBuilder<User> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     - PATCH /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter url2: (form)  (optional)
     - parameter username2: (form)  (optional)
     - parameter email2: (form)  (optional)
     - parameter groups2: (form)  (optional)
     - parameter url: (form)  (optional)
     - parameter username: (form)  (optional)
     - parameter email: (form)  (optional)
     - parameter groups: (form)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func usersPartialUpdateWithRequestBuilder(_id: Int, url2: String? = nil, username2: String? = nil, email2: String? = nil, groups2: [String]? = nil, url: String? = nil, username: String? = nil, email: String? = nil, groups: [String]? = nil) -> RequestBuilder<User> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: {})
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter url2: (form)  (optional)
     - parameter username2: (form)  (optional)
     - parameter email2: (form)  (optional)
     - parameter groups2: (form)  (optional)
     - parameter url: (form)  (optional)
     - parameter username: (form)  (optional)
     - parameter email: (form)  (optional)
     - parameter groups: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersPartialUpdate(_id: Int, url2: String? = nil, username2: String? = nil, email2: String? = nil, groups2: [String]? = nil, url: String? = nil, username: String? = nil, email: String? = nil, groups: [String]? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersPartialUpdateWithRequestBuilder(_id: _id, url2: url2, username2: username2, email2: email2, groups2: groups2, url: url, username: username, email: email, groups: groups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**

     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersRetrieve(_id: Int, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersRetrieveWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter _id: (path) A unique integer value identifying this user. 

     - returns: RequestBuilder<User> 
     */
    open class func usersRetrieveWithRequestBuilder(_id: Int) -> RequestBuilder<User> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body)  
     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdate(body: User, _id: Int, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersUpdateWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter body: (body)  
     - parameter _id: (path) A unique integer value identifying this user. 

     - returns: RequestBuilder<User> 
     */
    open class func usersUpdateWithRequestBuilder(body: User, _id: Int) -> RequestBuilder<User> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter url2: (form)  
     - parameter username2: (form)  
     - parameter email2: (form)  
     - parameter groups2: (form)  
     - parameter url: (form)  
     - parameter username: (form)  
     - parameter email: (form)  
     - parameter groups: (form)  
     - parameter _id: (path) A unique integer value identifying this user. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func usersUpdate(url2: String, username2: String, email2: String, groups2: [String], url: String, username: String, email: String, groups: [String], _id: Int, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        usersUpdateWithRequestBuilder(url2: url2, username2: username2, email2: email2, groups2: groups2, url: url, username: username, email: email, groups: groups, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /users/{id}/

     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey sessionid (QUERY)
       - name: cookieAuth
     - examples: [{contentType=application/json, example={
  "groups" : [ "http://example.com/aeiou", "http://example.com/aeiou" ],
  "url" : "http://example.com/aeiou",
  "email" : "",
  "username" : "username"
}}]
     - parameter url2: (form)  
     - parameter username2: (form)  
     - parameter email2: (form)  
     - parameter groups2: (form)  
     - parameter url: (form)  
     - parameter username: (form)  
     - parameter email: (form)  
     - parameter groups: (form)  
     - parameter _id: (path) A unique integer value identifying this user. 

     - returns: RequestBuilder<User> 
     */
    open class func usersUpdateWithRequestBuilder(url2: String, username2: String, email2: String, groups2: [String], url: String, username: String, email: String, groups: [String], _id: Int) -> RequestBuilder<User> {
        var path = "/users/{id}/"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: {})
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
